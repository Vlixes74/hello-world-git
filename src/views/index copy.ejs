<!DOCTYPE html>
<html lang="es">
<head>
  <%- include('partials/header') %>
  <style>
    /* Estilos personalizados para tablas con scroll */
    .table-scrollable {
      max-height: 500px;
      overflow-y: auto;
    }
    
    /* Fijar encabezados de tabla */
    .sticky-header thead th {
      position: sticky;
      top: 0;
      background: white;
      z-index: 10;
      box-shadow: 0 2px 2px -1px rgba(0, 0, 0, 0.1);
    }
    
    /* Scrollbar estilo Bootstrap */
    .table-scrollable::-webkit-scrollbar {
      width: 8px;
      height: 8px;
    }
    
    .table-scrollable::-webkit-scrollbar-thumb {
      background-color: #adb5bd;
      border-radius: 4px;
    }
    
    .table-scrollable::-webkit-scrollbar-track {
      background-color: #f8f9fa;
    }
    
    /* Ajustes para listas */
    .list-scrollable {
      max-height: 400px;
      overflow-y: auto;
    }
  </style>
</head>
<body>
  <%- include('partials/navbar', { isAdmin: user?.isAdmin }) %>

  <div class="container mt-4">
    <!-- Mensajes de alerta -->
    <% if (error) { %>
      <div class="alert alert-danger alert-dismissible fade show">
        <%= error %>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      </div>
    <% } %>
    
    <% if (success) { %>
      <div class="alert alert-success alert-dismissible fade show">
        <%= success %>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      </div>
    <% } %>

    <div class="row g-4">
      <!-- Sección principal -->
      <div class="col-lg-8">
        <div class="card shadow-sm">
          <div class="card-header bg-primary text-white">
            <h5 class="card-title mb-0">
              <i class="bi bi-upload me-2"></i>Cargar archivo CSV
            </h5>
          </div>
          <div class="card-body">
            <form action="/upload" method="POST" enctype="multipart/form-data" id="uploadForm">
              <div class="mb-3">
                <label for="csvFile" class="form-label">Selecciona un archivo CSV</label>
                <input class="form-control" type="file" id="csvFile" name="csvFile" accept=".csv" required>
                <div class="form-text">Tamaño máximo: 5MB</div>
              </div>
              
              <div class="mb-3">
                <label for="collectionName" class="form-label">Colección de destino</label>
                <select class="form-select" id="collectionName" name="collectionName" required>
                  <option value="CodigoQr">Codigos Qr</option>
                </select>
              </div>
              
              <button type="submit" class="btn btn-primary" id="uploadBtn">
                <span class="spinner-border spinner-border-sm d-none" id="uploadSpinner"></span>
                Cargar y Validar
              </button>
            </form>
          </div>
        </div>
        
        <% if (data) { %>
          <div class="card shadow-sm mt-4">
            <div class="card-header bg-info text-white">
              <h5 class="card-title mb-0">
                <i class="bi bi-table me-2"></i>Vista previa de datos
              </h5>
            </div>
            <div class="card-body p-0">
              <div class="table-responsive table-scrollable sticky-header">
                <table class="table table-striped table-hover mb-0">
                  <thead class="table-light">
                    <tr>
                      <% const headers = Object.keys(data[0] || {}); %>
                      <% headers.forEach(header => { %>
                        <th class="bg-light"><%= header %></th>
                      <% }); %>
                    </tr>
                  </thead>
                  <tbody>
                    <% const itemsPerPage = 20; %>
                    <% const currentPage = parseInt(query.page) || 1; %>
                    <% const startIdx = (currentPage - 1) * itemsPerPage; %>
                    <% const endIdx = startIdx + itemsPerPage; %>
                    <% const paginatedItems = data.slice(startIdx, endIdx); %>
                    
                    <% paginatedItems.forEach((row, index) => { %>
                      <tr>
                        <% headers.forEach(header => { %>
                          <td><%= row[header] %></td>
                        <% }); %>
                      </tr>
                    <% }); %>
                  </tbody>
                </table>
              </div>
              
              <!-- Paginación Bootstrap -->
              <% const totalPages = Math.ceil(data.length / itemsPerPage); %>
              <% if (totalPages > 1) { %>
                <div class="card-footer bg-white">
                  <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center mb-0">
                      <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                        <a class="page-link" href="?page=<%= currentPage - 1 %>" aria-label="Previous">
                          <span aria-hidden="true">&laquo;</span>
                        </a>
                      </li>
                      
                      <!-- Mostrar números de página -->
                      <% const maxVisiblePages = 5; %>
                      <% let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2)); %>
                      <% let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1); %>
                      
                      <% if (endPage - startPage < maxVisiblePages - 1) { %>
                        <% startPage = Math.max(1, endPage - maxVisiblePages + 1); %>
                      <% } %>
                      
                      <% if (startPage > 1) { %>
                        <li class="page-item">
                          <a class="page-link" href="?page=1">1</a>
                        </li>
                        <% if (startPage > 2) { %>
                          <li class="page-item disabled">
                            <span class="page-link">...</span>
                          </li>
                        <% } %>
                      <% } %>
                      
                      <% for (let i = startPage; i <= endPage; i++) { %>
                        <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                          <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                        </li>
                      <% } %>
                      
                      <% if (endPage < totalPages) { %>
                        <% if (endPage < totalPages - 1) { %>
                          <li class="page-item disabled">
                            <span class="page-link">...</span>
                          </li>
                        <% } %>
                        <li class="page-item">
                          <a class="page-link" href="?page=<%= totalPages %>"><%= totalPages %></a>
                        </li>
                      <% } %>
                      
                      <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                        <a class="page-link" href="?page=<%= currentPage + 1 %>" aria-label="Next">
                          <span aria-hidden="true">&raquo;</span>
                        </a>
                      </li>
                    </ul>
                  </nav>
                  <div class="text-center text-muted mt-2">
                    Mostrando <%= startIdx + 1 %>-<%= Math.min(endIdx, data.length) %> de <%= data.length %> registros
                  </div>
                </div>
              <% } %>
            </div>
          </div>
        <% } %>
      </div>
      
      <!-- Sidebar con historial -->
      <div class="col-lg-4">
        <div class="card shadow-sm">
          <div class="card-header bg-secondary text-white">
            <h5 class="card-title mb-0">
              <i class="bi bi-clock-history me-2"></i>Historial de cargas
            </h5>
          </div>
          <div class="card-body p-0">
            <% if (uploads && uploads.length > 0) { %>
              <div class="list-group list-group-flush list-scrollable">
                <% uploads.forEach(upload => { %>
                  <div class="list-group-item list-group-item-action">
                    <div class="d-flex w-100 justify-content-between">
                      <h6 class="mb-1"><%= upload.fileName %></h6>
                      <small class="text-muted">
                        <%= new Date(upload.uploadedAt?.seconds * 1000).toLocaleDateString() %>
                      </small>
                    </div>
                    <p class="mb-1"><%= upload.recordCount %> registros</p>
                    <small class="text-muted">Colección: <%= upload.collectionName %></small>
                  </div>
                <% }); %>
              </div>
            <% } else { %>
              <div class="text-center py-4 text-muted">
                <i class="bi bi-folder-x fs-1"></i>
                <p class="mt-2 mb-0">No hay cargas anteriores</p>
              </div>
            <% } %>
          </div>
        </div>
        
  <% if (user?.isAdmin) { %>
    <div class="modal fade" id="deleteModal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header bg-danger text-white">
            <h5 class="modal-title">Confirmar Borrado Masivo</h5>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <p>¿Estás seguro de querer borrar TODOS los documentos de la colección <strong id="collectionNameText"></strong>?</p>
            <p class="text-danger"><strong>Esta acción no se puede deshacer.</strong></p>
            <form id="deleteForm" method="POST">
              <div class="mb-3">
             <!--   <label for="confirmationText" class="form-label">Escribe "ELIMINAR" para confirmar:</label>
                <input type="text" class="form-control" id="confirmationText" required 
                      pattern="ELIMINAR" title="Debes escribir ELIMINAR para confirmar">-->
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
            <button type="submit" form="deleteForm" class="btn btn-danger">Confirmar Eliminación</button>
          </div>
        </div>
      </div>
    </div>
  <% } %>
      </div>
    </div>
  </div>

  <%- include('partials/footer') %>

  <script>
    // Script para mantener parámetros al recargar
    document.addEventListener('DOMContentLoaded', function() {
      // Mantener parámetros de paginación en formularios
      const forms = document.querySelectorAll('form');
      const urlParams = new URLSearchParams(window.location.search);
      const page = urlParams.get('page');
      
      if (page) {
        forms.forEach(form => {
          const hiddenInput = document.createElement('input');
          hiddenInput.type = 'hidden';
          hiddenInput.name = 'page';
          hiddenInput.value = page;
          form.appendChild(hiddenInput);
        });
      }
      
      // Inicializar tooltips de Bootstrap
      const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
      tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
      });
    });
  </script>
   <script>
    // Script para el modal de borrado
    document.addEventListener('DOMContentLoaded', () => {
      const deleteModal = document.getElementById('deleteModal');
      if (deleteModal) {
        deleteModal.addEventListener('show.bs.modal', (event) => {
          const collectionSelect = document.getElementById('collectionToDelete');
          const collectionNameText = document.getElementById('collectionNameText');
          const deleteForm = document.getElementById('deleteForm');
          
          const collectionName = collectionSelect.value;
          collectionNameText.textContent = collectionName;
          deleteForm.action = `admin/delete-collection/${collectionName}`;
        });
      }

      // Mostrar spinner durante la carga
      const uploadForm = document.getElementById('uploadForm');
      if (uploadForm) {
        uploadForm.addEventListener('submit', () => {
          const uploadBtn = document.getElementById('uploadBtn');
          const uploadSpinner = document.getElementById('uploadSpinner');
          
          uploadBtn.disabled = true;
          uploadSpinner.classList.remove('d-none');
        });
      }
    });
  </script>
</body>
</html>